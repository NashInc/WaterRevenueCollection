@model ChargeViewModel

@{
    ViewBag.Title = "Create Charge";
    var currentChargeScheduleId = ViewBag.ChargeScheduleId as Guid?;
    var currentChargeScheduleName = ViewBag.ChargeScheduleName as string;
}
@section ContentHeader
{
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            Charge Schedules
            <small>Add Charges to @Html.ActionLink(currentChargeScheduleName, "Details", "ChargeSchedules", new { id = currentChargeScheduleId }, new { @class = "btn btn-default" })</small>
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-money"></i> Charge Schedules</a></li>
            <li class="active">Add Charge To Schedule </li>
        </ol>
    </section>
}
<section class="content">
    <div class="row">
        <div class="col-md-12">
            @(Html.Kendo().Grid<ChargeViewModel>()
              .Name("charges")
              .Selectable(z => z.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
              .Scrollable(z => z.Enabled(true).Virtual(true))
              .Sortable(z => z.AllowUnsort(true).Enabled(true).SortMode(GridSortMode.MultipleColumn))
              .Columns(columns =>
              {
                  columns.Bound(column => column.ChargeId).Hidden(true);
                  columns.Bound(column => column.StartRange);
                  columns.Bound(column => column.EndRange);
                  columns.Bound(column => column.UnitPrice);
                  columns.Bound(column => column.DateCreated);
                  columns.Bound(column => column.CreatedBy);
                  columns.Bound(column => column.ChargeScheduleName);
              })
              .DataSource(dataSource => dataSource
                  .Ajax()
                  .Model(z => z.Id(x => x.ChargeId))
                  .Read(actionName: "GetChargesForSchedule", controllerName: "ChargeSchedules", routeValues: new { ChargeScheduleId = currentChargeScheduleId })
              )
            )
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            @using (Html.BeginForm(controllerName: "ChargeSchedules", actionName: "AddChargesToSchedule", method: FormMethod.Post, htmlAttributes: new { id = "chargeForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Charge</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.Hidden("ChargeScheduleId", currentChargeScheduleId)
                    <div class="form-group">
                        @Html.LabelFor(model => model.StartRange, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.StartRange, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StartRange, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.EndRange, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EndRange, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EndRange, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.UnitPrice, new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.Kendo().TextBoxFor(model => model.UnitPrice)                          
                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }

            @Html.ActionLink("Back to List", "Index", htmlAttributes: new { @class = "btn btn-default fa fa-arrow-left" }, routeValues: new { })
        </div>
        </div>
</section>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}