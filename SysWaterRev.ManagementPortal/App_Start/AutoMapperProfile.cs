using AutoMapper;
using SysWaterRev.BusinessLayer.Models;
using SysWaterRev.BusinessLayer.ViewModels;

namespace SysWaterRev.ManagementPortal
{
    public class AutoMapperProfile : Profile
    {
        protected override void Configure()
        {
            ConfigureMapping();
            Mapper.AssertConfigurationIsValid();
            base.Configure();
        }

        private static void ConfigureMapping()
        {
            Mapper.CreateMap<SystemSetting, SystemSettingsViewModel>()
                .ForMember(x => x.SystemSettingId, expr => expr.MapFrom(z => z.SystemSettingId))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.CurrentChargeScheduleName,
                    expr => expr.MapFrom(z => z.CurrentChargeSchedule.ChargeScheduleName))
                .ForMember(x => x.ChargeScheduleCreatedBy, expr => expr.MapFrom(z => z.CurrentChargeSchedule.CreatedBy))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy))
                .ForMember(x => x.SetBy, expr => expr.MapFrom(z => z.SetBy))
                .ForMember(x => x.ChargeScheduleId, expr => expr.MapFrom(z => z.ChargeScheduleId))
                .ForMember(x => x.ChargeScheduleActivatedDate,
                    expr => expr.MapFrom(z => z.CurrentChargeSchedule.DateActivated))
                .ForMember(x => x.ChargeScheduleEffectiveDate,
                    expr => expr.MapFrom(z => z.CurrentChargeSchedule.EffectiveDate))
                .ForMember(x => x.SystemSettingId, expr => expr.MapFrom(z => z.SystemSettingId));
            Mapper.CreateMap<Customer, CustomerViewModel>()
                .ForMember(x => x.TotalBill, expr => expr.Ignore())
                .ForMember(x => x.MetersOwned, expr => expr.MapFrom(z => z.Meters.Count))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.CustomerId, expr => expr.MapFrom(z => z.CustomerId))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.EmailAddress, expr => expr.MapFrom(z => z.EmailAddress))
                .ForMember(x => x.CustomerNumber, expr => expr.MapFrom(z => z.CustomerNumber))
                .ForMember(x => x.FirstName, expr => expr.MapFrom(z => z.FirstName))
                .ForMember(x => x.Identification, expr => expr.MapFrom(z => z.Identification))
                .ForMember(x => x.UserGender, expr => expr.MapFrom(z => z.UserGender))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy))
                .ForMember(x => x.MetersOwned, expr => expr.MapFrom(z => z.Meters.Count))
                .ForMember(x => x.MiddleName, expr => expr.MapFrom(z => z.MiddleName))
                .ForMember(x => x.Surname, expr => expr.MapFrom(z => z.Surname))
                .ForMember(x => x.TotalCost, expr => expr.Ignore())
                .ForMember(x => x.TotalUnitsConsumed, expr => expr.Ignore())
                .ForMember(x => x.TotalConfirmedReadings, expr => expr.Ignore())
                .ForMember(x => x.TotalReadings, expr => expr.Ignore())
                .ForMember(x => x.TotalCorrectedAndConfirmed, expr => expr.Ignore())
                .ForMember(x => x.TotalReadings, expr => expr.Ignore())
                .ForMember(x => x.TotalCorrectedReadings, expr => expr.Ignore())
                .ForMember(x => x.TotalCostCorrectedAndConfirmed, expr => expr.Ignore())
                .ForMember(x => x.TotalCost, expr => expr.Ignore())
                .ForMember(x => x.TotalCostCorrectedReadings, expr => expr.Ignore())
                .ForMember(x => x.TotalConfirmedReadings, expr => expr.Ignore())
                .ForMember(x => x.TotalConfirmedReadingsCost, expr => expr.Ignore())
                .ForMember(x => x.PhoneNumber, expr => expr.MapFrom(z => z.PhoneNumber));
            Mapper.CreateMap<Employee, EmployeeViewModel>()
                .ForMember(x => x.ReadingsCount, expr => expr.MapFrom(z => z.ReadingsMade.Count))
                .ForMember(x => x.EmployeeId, expr => expr.MapFrom(z => z.EmployeeId))
                .ForMember(x => x.EmployeeNumber, expr => expr.MapFrom(z => z.EmployeeNumber))
                .ForMember(x => x.FirstName, expr => expr.MapFrom(z => z.FirstName))
                .ForMember(x => x.MiddleName, expr => expr.MapFrom(z => z.MiddleName))
                .ForMember(x => x.Surname, expr => expr.MapFrom(z => z.Surname))
                .ForMember(x => x.EmployeeGender, expr => expr.MapFrom(z => z.EmployeeGender))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))
                .ForMember(x => x.Identification, expr => expr.MapFrom(z => z.Identification))
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy));
            Mapper.CreateMap<Reading, ReadingViewModel>()
                .ForMember(x => x.ReadingId, expr => expr.MapFrom(z => z.ReadingId))
                .ForMember(x => x.EmployeeFirstName, expr => expr.MapFrom(z => z.ReadBy.FirstName))
                .ForMember(x => x.EmployeeMiddleName, expr => expr.MapFrom(z => z.ReadBy.MiddleName))
                .ForMember(x => x.EmployeeSurname, expr => expr.MapFrom(z => z.ReadBy.Surname))
                .ForMember(x => x.EmployeeNumber, expr => expr.MapFrom(z => z.ReadBy.EmployeeNumber))
                .ForMember(x => x.Latitude, expr => expr.MapFrom(z => z.Latitude))
                .ForMember(x => x.Longitude, expr => expr.MapFrom(z => z.Longitude))
                .ForMember(x => x.MeterId, expr => expr.MapFrom(z => z.MeterId))
                .ForMember(x => x.ReadingValue, expr => expr.MapFrom(z => z.ReadingValue))
                .ForMember(x => x.Accuracy, expr => expr.MapFrom(z => z.Accuracy))
                .ForMember(x => x.LocationDateTime, expr => expr.MapFrom(z => z.LocationDateTime))
                .ForMember(x => x.Speed, expr => expr.MapFrom(z => z.Speed))
                .ForMember(x => x.CorrectionValue, expr => expr.MapFrom(z => z.CorrectionValue))
                .ForMember(x => x.Altitude, expr => expr.MapFrom(z => z.Altitude))
                .ForMember(x => x.AltitudeAccuracy, expr => expr.MapFrom(z => z.AltitudeAccuracy))
                .ForMember(x => x.ConfirmedBy, expr => expr.MapFrom(z => z.ConfirmedBy))
                .ForMember(x => x.CorrectedBy, expr => expr.MapFrom(z => z.CorrectedBy))
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))
                .ForMember(x => x.Heading, expr => expr.MapFrom(z => z.Heading))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.MeterNumber, expr => expr.MapFrom(z => z.MeterRead.MeterNumber))
                .ForMember(x => x.MeterSerialNumber, expr => expr.MapFrom(z => z.MeterRead.MeterSerialNumber))
                .ForMember(x => x.EmployeeFullName, expr => expr.Ignore())
                .ForMember(x => x.CustomerId, expr => expr.Ignore())
                .ForMember(x => x.PreviousReadingValue, expr => expr.MapFrom(z => z.PreviousReading.ReadingValue))
                .ForMember(x => x.PreviousCorrectedReadingValue,
                    expr => expr.MapFrom(z => z.PreviousReading.CorrectionValue))
                .ForMember(x => x.TotalBill, expr => expr.Ignore())
                .ForMember(x => x.UnitsConsumedWithCorrection, expr => expr.Ignore())
                .ForMember(x => x.UnitsConsumedWithNoCorrection, expr => expr.Ignore())
                .ForMember(x => x.PreviousReadingId, expr => expr.MapFrom(z => z.PreviousReading.ReadingId))
                .ForMember(x => x.UserName, expr => expr.Ignore());
            Mapper.CreateMap<Meter, MeterViewModel>()
                .ForMember(x => x.FirstName, expr => expr.MapFrom(z => z.OwnerCustomer.FirstName))
                .ForMember(x => x.MiddleName, expr => expr.MapFrom(z => z.OwnerCustomer.MiddleName))
                .ForMember(x => x.Surname, expr => expr.MapFrom(z => z.OwnerCustomer.Surname))
                .ForMember(x => x.CustomerNumber, expr => expr.MapFrom(z => z.OwnerCustomer.CustomerNumber))
                .ForMember(x => x.MeterId, expr => expr.MapFrom(z => z.MeterId))
                .ForMember(x => x.MeterNumber, expr => expr.MapFrom(z => z.MeterNumber))
                .ForMember(x => x.CustomerNumber, expr => expr.MapFrom(z => z.OwnerCustomer.CustomerNumber))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy))
                .ForMember(x => x.ReadingsForMeter, expr => expr.MapFrom(z => z.MeterReadings.Count))
                .ForMember(x => x.CustomerId, expr => expr.MapFrom(z => z.CustomerId))
                .ForMember(x => x.MeterSerialNumber, expr => expr.MapFrom(z => z.MeterSerialNumber))
                .ForMember(x => x.TotalBill, expr => expr.Ignore())
                .ForMember(x => x.MeterNumberWithOwner, expr => expr.Ignore())
                .ForMember(x => x.CustomerName, expr => expr.Ignore())
                .ForMember(x => x.CustomerNumber, expr => expr.MapFrom(z => z.OwnerCustomer.CustomerNumber))
                .ForMember(x => x.CustomerNameWithNumber, expr => expr.Ignore());
            Mapper.CreateMap<Charge, ChargeViewModel>()
                .ForMember(x => x.ChargeScheduleName, expr => expr.MapFrom(z => z.ChargeSchedule.ChargeScheduleName))
                .ForMember(x => x.UnitPrice, expr => expr.MapFrom(z => z.UnitPrice))
                .ForMember(x => x.StartRange, expr => expr.MapFrom(z => z.StartRange))
                .ForMember(x => x.EndRange, expr => expr.MapFrom(z => z.EndRange))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.ChargeId, expr => expr.MapFrom(z => z.ChargeId))
                .ForMember(x => x.ChargeScheduleEffectiveDate, expr => expr.MapFrom(z => z.ChargeSchedule.EffectiveDate))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy))
                .ForMember(x => x.IsActive, expr => expr.MapFrom(z => z.ChargeSchedule.IsActive))
                .ForMember(x => x.ChargeScheduleId, expr => expr.MapFrom(z => z.ChargeSchedule.ChargeScheduleId));
            Mapper.CreateMap<ChargeSchedule, ChargeScheduleViewModel>()
                .ForMember(x => x.ChargesUnderSchedule, expr => expr.MapFrom(z => z.Charges.Count))
                .ForMember(x => x.IsActive, expr => expr.MapFrom(z => z.IsActive))
                .ForMember(x => x.ActivatedBy, expr => expr.MapFrom(z => z.ActivatedBy))
                .ForMember(x => x.ChargeScheduleId, expr => expr.MapFrom(z => z.ChargeScheduleId))
                .ForMember(x => x.ChargeScheduleName, expr => expr.MapFrom(z => z.ChargeScheduleName))
                .ForMember(x => x.ChargesUnderSchedule, expr => expr.MapFrom(z => z.Charges.Count))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.DateActivated, expr => expr.MapFrom(z => z.DateActivated))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.Description, expr => expr.MapFrom(z => z.Description))
                .ForMember(x => x.EffectiveDate, expr => expr.MapFrom(z => z.EffectiveDate))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))
                .ForMember(x => x.ChargeScheduleNameAndDate, expr => expr.Ignore())
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy));
            Mapper.CreateMap<ChargeScheduleViewModel, ChargeSchedule>()
                .ForMember(x => x.ActivatedBy, expr => expr.MapFrom(z => z.ActivatedBy))
                .ForMember(x => x.EffectiveDate, expr => expr.MapFrom(z => z.EffectiveDate))
                .ForMember(x => x.DateActivated, expr => expr.MapFrom(z => z.DateActivated))
                .ForMember(x => x.EffectiveDate, expr => expr.MapFrom(z => z.EffectiveDate))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy))
                .ForMember(x => x.IsActive, expr => expr.MapFrom(z => z.IsActive))
                .ForMember(x => x.ChargeScheduleId, expr => expr.MapFrom(z => z.ChargeScheduleId))
                .ForMember(x => x.ChargeScheduleName, expr => expr.MapFrom(z => z.ChargeScheduleName))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.Description, expr => expr.MapFrom(z => z.Description))
                .ForMember(x => x.RowVersion, expr => expr.Ignore())
                .ForMember(x => x.Charges, expr => expr.Ignore());
            Mapper.CreateMap<MeterViewModel, Meter>()

                .ForMember(x => x.RowVersion, expr => expr.Ignore())
                .ForMember(x => x.MeterReadings, expr => expr.Ignore())
                .ForMember(x => x.OwnerCustomer, expr => expr.Ignore());
            Mapper.CreateMap<ChargeViewModel, Charge>()

                .ForMember(x => x.ChargeId, expr => expr.Ignore())
                .ForMember(x => x.UnitPrice, expr => expr.MapFrom(z => z.UnitPrice))
                .ForMember(x => x.StartRange, expr => expr.MapFrom(z => z.StartRange))
                .ForMember(x => x.EndRange, expr => expr.MapFrom(z => z.EndRange))
                .ForMember(x => x.DateCreated, expr => expr.MapFrom(z => z.DateCreated))
                .ForMember(x => x.CreatedBy, expr => expr.MapFrom(z => z.CreatedBy))
                .ForMember(x => x.LastEditDate, expr => expr.MapFrom(z => z.LastEditDate))              
                .ForMember(x => x.PreviousCharge, expr => expr.Ignore())
                .ForMember(x => x.ChargeSchedule, expr => expr.Ignore())
                .ForMember(x => x.RowVersion, expr => expr.Ignore())
                .ForMember(x => x.LastEditedBy, expr => expr.MapFrom(z => z.LastEditedBy));
        }
    }
}